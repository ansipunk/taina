[build-system]
requires = ["setuptools==70.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "taina"
dynamic = ["version"]
dependencies = [
    "SQLAlchemy==2.0.32",
    "alembic==1.13.2",
    "fastapi==0.112.0",
    "hiredis==3.0.0",
    "psycopg==3.1.20",
    "psycopg_pool==3.2.2",
    "pydantic-settings==2.4.0",
    "pydantic==2.8.2",
    "python-multipart==0.0.9",
    "redis==5.0.8",
    "uvicorn==0.30.5",
    "uvloop==0.19.0",
]

[project.optional-dependencies]
dev = [
    "async-asgi-testclient==1.4.11",
    "pytest-asyncio==0.23.8",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest-xdist==3.6.1",
    "pytest==8.3.2",
    "ruff==0.5.7",
]

[tool.setuptools.dynamic]
version = {attr = "taina.__version__"}

[tool.coverage.run]
omit = ["taina/migrations/*"]

[tool.pytest.ini_options]
addopts = "-n 4 --cov=taina --cov-report=term-missing --cov-report=html --cov-fail-under=100"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins
    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "C90",    # mccabe
    "COM",    # flake8-commas
    "DTZ",    # flake8-datetimez
    "E",      # pycodestyle errors
    "ERA",    # eradicate
    "F",      # pyflakes
    "FBT",    # flake8-boolean-trap
    "FLY",    # flynt
    "FURB",   # refurb
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "ISC",    # flake8-implicit-str-concat
    "N",      # pep8-naming
    "PERF",   # perflint
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "R",      # refactor
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # ruff
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "T20",    # flake8-print
    "UP",     # pyupgrade
    "W",      # pycodestyle warnings
]
ignore = [
    "B008",  # Do not perform function call in argument defaults (FastAPI dependency injections)
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` (Ignoring exception traceback)
    "N818",  # Exception name should be named with an Error suffix (Non-error exception cases like UserDoesNotExist)
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*" = [
    "ARG001",  # Unused function argument (Fixtures in tests)
    "S101",    # Use of assert detected
    "S105",    # Possible hardcoded password assigned to variable
    "S106",    # Possible hardcoded password assigned to argument
    "S107",    # Possible hardcoded password assigned to function default
]

[tool.ruff.lint.isort]
force-single-line = true
